
Each weekend, I teach karate to kids ages 3-12. As I show the "Little Ninjas" how to position their hands to do a clean shoulder roll, or I help the "Young Tigers" break down a tricky section of the Two-Man Bo Staff form, any frustration or tiredness I might have felt before entering the dojo evaporates. All that remains is an irresistible urge to share the joy I myself felt upon first learning to fluidly link the complex movements. When my students master a maneuver, I see the excitement in their eyes. I smile because it is excitement we now share.


My current top interests include high-performance computing (especially parallel and quantum), embedded system design, complexity theory, cryptography, robotics, AI for autonomous systems, computational biology, and computational linguistics, all topics MIT EECS addresses. Moreover, I would love to do research at CSAIL for a UROP.I already know firsthand that MIT EECS suits my learning style. Last summer, I needed to program an FPGA (microchip) for my Intel STS project. Almost exclusively by reading the lecture slides of course 6.111, I learned the Verilog hardware description language and the nuances of programmable logic design. The course was so efficiently taught that I was able to do this in just 2 months.


My Intel STS project originated while I was hiking during a thunderstorm. I was pondering, with some trepidation, what determines the paths of lightning bolts; I reflected that they must take some course of least resistance. Suddenly I was struck (by an idea): could an electronic hardware model of this physical phenomenon be used to solve the shortest path problem in graph theory (e.g. "What is the shortest route a car can take through a network of roads to arrive at its destination?")? The lightning insight didn't pan out, but a week later, I found inspiration in a different natural phenomenon. While surfing, as I watched rivulets of water branching and re-fusing as they found their way down my surfboard, I realized that water molecules diffusing throughout a network could essentially function as thousands of identical-speed cars taking every possible path; the first "car" to reach the destination from the origin would have taken the shortest path. I simulated a graph with a network of paper towel strips, soaked one intersection of strips (the origin) in water, and watched the liquid diffuse through the network, marking which incident strip was the first to wet each subsequent intersection. Once water reached the destination, I could identify the path taken by the first molecules to arrive (i.e. the shortest path) simply by tracing the sequence of marked strips backwards from the destination to the origin. This formed the basis of the parallel algorithm that I accelerated and then implemented synchronously on an FPGA microchip for the Intel STS; it ran on the order of 300 times faster than high-speed sequential approaches. Moreover, it generalized to solve the NP-complete (much harder) knapsack problem. I continue to investigate the paradigm's potential today.


I've picked up two nicknames in high school: "Comp Sci Guy" and "J-Dog. "By day and night, I indulge my inner nerd as Comp Sci Guy. At and after school, I spend my time playing or working on problems with friends in the Rubik's cubing, chess, math, robotics, and programming clubs (though I've been known to slip into LitMag meetings as well). I love to code late at night to music. The rhythms tap and seethe in a melodic trance of energy and synchronize with my neurons, which beat in harmonious unison. For a few eternity-hours, optimal logic comes without effort; each word of the program has more meaning than a thousand pictures. Then the playlist ends and all that remain are the abstract beauty of the code and the ethereal silence of the night. By dawn and dusk (when the wind is most calm), I paddle out with the surf team as J-Dog. Surfing is as visceral as programming is cerebral: dropping into a 7-foot barreling wave is like riding a standup liquid rollercoaster that I control (or if I fall, it's like being a cockroach in a trash compactor). But it's more than that. While I sit at peace in the stillness between the hollow waves, my thoughts branch out unfettered - if I've hit a wall with a programming problem, it often melts away in the water. When the sun sets (or the wind picks up), I return home, mind refreshed, ready to become Comp Sci Guy once more. My double life has inspired me to continue to immerse myself in programming but also keep a foot in the outside world.


As sophomores, AP Chemistry students at my high school typically spend 80% of their time doing homework and 30% of their time working on extracurriculars. On top of the typical 110%, I had a burgeoning Web development business, and I'd learned long before that in business, there's no excuse for failing to deliver, regardless of the number of lab writeups you have due tomorrow. By spring, if I had been one of the web servers I was administering, I would have been spouting 503 error messages ("Service Unavailable"; too many requests), but unfortunately, humans aren't allowed the luxury of throwing exceptions. Fortunately, at the beginning of that demanding year, I'd co-founded the Torrey Pines Programming Club. There, I had befriended numerous motivated computer science students who were masters in certain specialized areas but lacked the complete technical and business skillset necessary to enter the professional world. Over the year, I taught them JavaScript, PHP, AJAX, XHTML, and CSS, some of the most important Web languages. So, when my schedule began to overload, I had a natural solution. I sent out an e-mail to several select members of the programming club, offering to hire them. They responded with a resounding: "I'm in!" Things progressed quickly. I matched programmers to projects, touched up their training, and developed a modular, scalable, server-side framework that would allow everybody's code to cleanly interface. Over the following months, we delivered several high-end websites and applications (such as itsabeauty.com). My workload became reasonable, and my friends became professionals. We do business together to this day.


Dear Admissions Officers,


More than one MIT student has told me that the best way evaluate my suitability for MIT would be to read (or at least peruse the figures in) my Intel Science Talent Search paper. My project consisted of developing a massively parallel FPGA microchip to solve the shortest path problem (and expanding the algorithmic paradigm behind it to solve other computationally difficult problems). It has been mailed and is also at:http://jacobsstuff.tpclubs.com/files/intel_sts_paper/ResearchReport1.2.pdf


I would be much obliged if you would take a look.


Additional SAT II Subject tests: 790 Chemistry, 790 English Literature, 740 Spanish


Additional Community Service:


Additional Distinctions:


Additional Information:


Enlist the expert help of one of our Ivy-League editors. Get individual coaching to make your essay stand out among the crowd. Learn more.


Keep reading more MIT admissions essays — you can't be too prepared!


Previous EssayNext Essay


Tip: Use the ← → keys to navigate!


This essay comes from AdmitSphere who kindly allowed it to be republished here.


Education is the key to unlock the golden door of freedom. George Washington Carver


That's easy — it's the best way to study for AP classes and AP exams! StudyNotes offers fast, free study tools for AP students. Our AP study guides, practice tests, and notes are the best on the web because they're contributed by students and teachers like yourself. Always 100% free.


Follow @StudyNotesApp on Twitter!

